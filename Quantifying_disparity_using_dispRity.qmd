---
title: "Quantifying disparity using dispRity"
author: Thomas Guillerme. Adapted by Thomas J. Smith.
format: html
editor: visual
---

## 1.0 Introduction

For those of you who are comfortable manipulating objects in R, you can calculate pretty much any disparity metric using base R functions. However, doing so will often require you to transform objects in specific ways and extract specific elements of complex outputs, which can be a little daunting and/or confusing. Luckily, Thomas Guillerme of the University of Sheffield has put together a fantastic do-it-all package that let's you conduct all sorts of disparity analyses. He has also spent considerable time writing a fantastic manual for the package, with plenty of examples (https://raw.githack.com/TGuillerme/dispRity/master/inst/gitbook/\_book/index.html).

I have transcribed one such example below. Run through it, see what you think, then start playing around with the package.

### 1.1 Load libraries and datasets

Install and load dispRity.

```{r}
rm(list=ls())
if(length(c("dispRity")[!c("dispRity") %in% installed.packages()[,"Package"]]) > 0){
  install.packages(c("dispRity")[!c("dispRity") %in% installed.packages()[,"Package"]])
}
library(dispRity)
```

First, we'll set the seed for reproducibility, then load the datasets.

Today we'll be working with a mammal dataset, specifically the ordination of a 50-taxon Gower distance matrix derived from discrete character data. We'll load two versions: the first is solely composed of the loadings of the sampled taxa (BeckLee_mat50), the second (BeckLee_mat99) includes the loadings for each node in the phylogenetic tree that unites them. We'll also load the phylogenetic tree used to estimate the node states and age data for some of the tips.

```{r}
set.seed(123)
data(BeckLee_mat50)
data(BeckLee_mat99)
data(BeckLee_tree)
data(BeckLee_ages)
```

You can check out the dimensions of the matrices using the dim function.

```{r}
dim(BeckLee_mat50)
dim(BeckLee_mat99)
```

As expected, 50 rows (i.e., taxa) in BeckLee_mat50, and 99 in BeckLee_mat99.

We can also take a peak at the phylogeny. We can do this simply...

```{r}
plot(BeckLee_tree, cex = 0.7)
axisPhylo(root = 140)
```

...and we can do it with a fancy geological time scale (using the strap package)!

```{r}
if(!require(strap)) install.packages("strap")
strap::geoscalePhylo(BeckLee_tree, cex.tip = 0.7, cex.ts = 0.6)
```

If you want to use your own data, you can use any type of morphospace in any dataset form ("matrix", "data.frame"). Throughout this tutorial, you we assume you are using the (loose) morphospace definition from Thomas Guillerme, Cooper, et al. (2020): any matrix were columns are traits and rows are observations (in a distance matrix, columns are still trait, i.e. “distance to species A”, etc.). We won’t cover it here but you can also use lists of matrices and list of trees.

To go through this tutorial you will need:

-   A matrix with tip data
-   A phylogenetic tree
-   A matrix with tip and node data
-   A table of first and last occurrences data (FADLAD)

If you are missing any of these components, you can use the following functions to sample any of the missing components:

```{r}
## Functions to get simulate a PCO looking like matrix from a tree
i.need.a.matrix <- function(tree) {
    matrix <- space.maker(elements = Ntip(tree), dimensions = Ntip(tree), distribution = rnorm,
                          scree = rev(cumsum(rep(1/Ntip(tree), Ntip(tree)))))
    rownames(matrix) <- tree$tip.label
    return(matrix)
}

## Function to simulate a tree
i.need.a.tree <- function(matrix) {
    tree <- rtree(nrow(matrix))
    tree$root.time <- max(tree.age(tree)$age)
    tree$tip.label <- rownames(matrix)
    tree$node.label <- paste0("n", 1:(nrow(matrix)-1))
    return(tree)
}

## Function to simulate some "node" data
i.need.node.data <- function(matrix, tree) {
    matrix_node <- space.maker(elements = Nnode(tree), dimensions = ncol(matrix),
                               distribution = rnorm, scree = apply(matrix, 2, var))
    if(!is.null(tree$node.label)) {
        rownames(matrix_node) <- tree$node.label
    } else {
        rownames(matrix_node) <- paste0("n", 1:(nrow(matrix)-1))
    }
    return(rbind(matrix, matrix_node))
}

## Function to simulate some "FADLAD" data
i.need.FADLAD <- function(tree) {
    tree_ages <- tree.age(tree)[1:Ntip(tree),]
    return(data.frame(FAD = tree_ages[,1], LAD = tree_ages[,1], row.names = tree_ages[,2]))
}
```

Once you've done that, simply rename your data objects as the Beck & Lee dataset is renamed below. For now, we're sticking with the example dataset for this practical.

```{r}
## A matrix with tip data
my_matrix <- BeckLee_mat50

## A phylogenetic tree 
my_tree <- BeckLee_tree

## A matrix with tip and node data
my_tip_node_matrix <- BeckLee_mat99

## A table of first and last occurrences data (FADLAD)
my_fadlad <- BeckLee_ages
```

## 2.0 Disparity through time

### 2.1 Splitting the morphospace through time

One of the crucial steps in disparity-through-time analysis is to split the full morphospace into smaller time subsets that contain the total number of morphologies at certain points in time (time-slicing) or during certain periods in time (time-binning). Basically, the full morphospace represents the total number of morphologies across all time and will be greater than any of the time subsets of the morphospace.

The dispRity package provides a chrono.subsets function that allows users to split the morphospace into time slices (using method = continuous) or into time bins (using method = discrete). In this example, we are going to split the morphospace into five equal time bins of 20 million years long from 100 million years ago to the present. We will also provide to the function a table containing the first and last occurrences dates for some fossils to take into account that some fossils might occur in several of our different time bins.

```{r}
## Creating the vector of time bins ages
time_bins <- rev(seq(from = 0, to = 100, by = 20))

## Splitting the morphospace using the chrono.subsets function
binned_morphospace <- chrono.subsets(data = my_matrix, tree = my_tree,
    method = "discrete", time = time_bins, inc.nodes = FALSE,
    FADLAD = my_fadlad)
```

The output object is a dispRity object (In brief, dispRity objects are lists of different elements (i.e. disparity results, morphospace time subsets, morphospace attributes, etc.) that display only a summary of the object when calling the object to avoiding filling the R console with superfluous output. It also allows easy plotting/summarising/analysing for repeatability down the line but we will not go into this right now.

For more on dispRity objects, see the manual: https://raw.githack.com/TGuillerme/dispRity/master/inst/gitbook/\_book/the-guts-of-the-disprity-package.html#disprity-object

Let's take a peek under the hood.

```{r}
## Printing the class of the object
class(binned_morphospace)
```

```{r}
## Printing the content of the object
str(binned_morphospace)
```

```{r}
## Printing the names of each element of the object
names(binned_morphospace)
```

```{r}
## Printing the object as a dispRity class
binned_morphospace
```

These objects will gradually contain more information when completing the following steps in the disparity-through-time analysis.

### 2.2 Bootstrapping the data

Once we obtain our different time subsets, we can bootstrap and rarefy them (i.e. pseudo-replicating the data). The bootstrapping allows us to make each subset more robust to outliers and the rarefaction allows us to compare subsets with the same number of taxa to remove sampling biases (i.e. more taxa in one subset than the others). The boot.matrix function bootstraps the dispRity object and the rarefaction option within performs rarefaction.

```{r}
## Getting the minimum number of rows (i.e. taxa) in the time subsets
minimum_size <- min(size.subsets(binned_morphospace))

## Bootstrapping each time subset 100 times and rarefying them 
rare_bin_morphospace <- boot.matrix(binned_morphospace, bootstraps = 100,
    rarefaction = minimum_size)
```

### 2.3 Calculating disparity

We can now calculate the disparity within each time subsets along with some confidence intervals generated by the pseudoreplication step above (bootstraps/rarefaction). Disparity can be calculated in many ways and this package allows users to come up with their own disparity metrics. For more details, please refer to the dispRity metric section (or directly use moms).

In this example, we are going to look at how the spread of the data in the morphospace through time. For that we are going to use the sum of the variance from each dimension of the morphospace in the morphospace. We highly recommend using a metric that makes sense for your specific analysis and for your specific dataset and not just because everyone uses it!

This is not a straightforward question but you can use the test.metric function to check your assumptions. Basically, what test.metric does is modify your morphospace using a null process of interest (e.g. changes in size) and checks whether your metric does indeed pick up that change. For example here, let see if the sum of variances picks up changes in size but not random changes:

```{r}
my_test <- test.metric(my_matrix, metric = c(sum, dispRity::variances), shifts = c("random", "size"))
summary(my_test)
plot(my_test)
```

We see that changes in the inner size (see Thomas Guillerme, Puttick, et al. (2020) for more details) is actually picked up by the sum of variances but not random changes or outer changes. Which is a good thing!

As you’ve noted, the sum of variances is defined in test.metric as c(sum, variances). This is a core bit of the dispRity package where you can define your own metric as a function or a set of functions. You can find more info about this in the dispRity metric section but in brief, the dispRity package considers metrics by their “dimensions” level which corresponds to what they output. For example, the function sum is a dimension level 1 function because no matter the input, it outputs a single value (the sum). Variances on the other hand is a dimension level 2 function because it will output the variance of each column in a matrix (an example of a dimensions level 3 would be the function var that outputs a matrix). The dispRity package always automatically sorts the dimensions levels: it will always run dimensions level 3 \> dimensions level 2 \> and dimensions level 1. In this case both c(sum, variances) and c(variances, sum) will result in actually running sum(variances(matrix)).

Anyways, let’s calculate the sum of variances on our bootstrapped and rarefied morphospaces:

```{r}
## Calculating disparity for the bootstrapped and rarefied data
disparity <- dispRity(rare_bin_morphospace , metric = c(sum, dispRity::variances))
```

To display the actual calculated scores, we need to summarise the disparity object using the S3 method summary that is applied to a dispRity object (see ?summary.dispRity for more details). By the way, as for any R package, you can refer to the help files for each individual function for more details.

```{r}
## Summarising the disparity results
summary(disparity)
```

The summary.dispRity function comes with many options on which values to calculate (central tendency and quantiles) and on how many digits to display. Refer to the function’s manual for more details.

### 2.4 Plotting the results

It is sometimes easier to visualise the results in a plot than in a table. For that we can use the plot S3 function to plot the dispRity objects (see ?plot.dispRity for more details).

```{r}
## Graphical options
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")
```

```{r}
plot(disparity, type = "continuous", main = "bootstrapped results")
plot(disparity, type = "continuous", main = "rarefied results",
     rarefaction = minimum_size)
```

Nice. The curves look pretty similar. Same as for the summary.dispRity function, check out the plot.dispRity manual for the many, many options available.

### 2.5 Testing differences

Finally, to draw some valid conclusions from these results, we can apply some statistical tests. We can test, for example, if mammalian disparity changed significantly through time over the last 100 million years. To do so, we can compare the means of each time-bin in a sequential manner to see whether the disparity in bin n is equal to the disparity in bin n+1, and whether this is in turn equal to the disparity in bin n+2, etc. Because our data is temporally autocorrelated (i.e. what happens in bin n+1 depends on what happened in bin n) and pseudoreplicated (i.e. each bootstrap draw creates non-independent time subsets because they are all based on the same time subsets), we apply a non-parametric mean comparison: the wilcox.test. Also, we need to apply a p-value correction (e.g. Bonferroni correction) to correct for multiple testing (see ?p.adjust for more details).

```{r}
## Testing the differences between bins in the bootstrapped dataset.
test.dispRity(disparity, test = wilcox.test, comparison = "sequential",
    correction = "bonferroni")
```

```{r}
## Testing the differences between bins in the rarefied dataset.
test.dispRity(disparity, test = wilcox.test, comparison = "sequential",
    correction = "bonferroni", rarefaction  = minimum_size)
```

Here our results show significant changes in disparity through time between the first two pairs of time bins (all p-values \< 0.05). There is no difference in interpretation between the bootstrapped and rarefied p-values, but they do differ, highlighting the need to be careful with how you prepare your data for analyses. 

Don't stop there - there are plenty more analyses to play around with using dispRity. Have a browse of the manual: https://raw.githack.com/TGuillerme/dispRity/master/inst/gitbook/\_book/index.html
