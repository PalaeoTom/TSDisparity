---
title: "An introduction to Geomorph"
author: "Antigoni Kaliontzopoulou & Michael Collyer. Adapted by Thomas Smith"
format: html
editor: visual
---

## 1.0 Preparing your data

In geomorph, you can digitize fixed landmarks, and semilandmarks on surfaces, using a 3D surface object or a mesh3d object. In its simplest version, this involves the following geomorph functions: digit.fixed, buildtemplate, and digitsurface. If you want to use curve semilandmarks, these may be either digitized as fixed landmarks, and then indexed for sliding using the curves argument of gpagen(); or sampled automatically from a digitized curve using digit.curves(). These functions require the package rgl, which in turn requires Java. As this requirement can cause problems for people (myself included) and is not the recommended approach for landmarking, I have not included it in this vignette. 

First, let us check if you have geomorph installed, install it if necessary, then load the package. 

```{r}
if(length(c("geomorph")[!c("geomorph") %in% installed.packages()[,"Package"]]) > 0){
  install.packages(c("geomorph")[!c("geomorph") %in% installed.packages()[,"Package"]])
}
library(geomorph)
```


## 2.0 Principal components analysis and visualisation tools for exploring shape space

Version 3.1.0 of geomorph introduced the function gm.prcomp, and related utility functions (summary() and plot()), for performing principal components analyses on Procrustes shape variables for a set of aligned specimens. This function now includes several different types of analytical options and, combined with other visualization tools available in geomorph, provides tools for exploring variation in shape space.

Throughout, we will be using shape data of several Plethodon species as an example, so letÂ´s first load and superimpose those.

```{r}
rm(list=ls())
data("plethspecies")
Y.gpa <- gpagen(plethspecies$land, print.progress = F)
```

### 2.1 Traditional PCA and visualising shape patterns

One first option is to perform a "traditional" PCA, i.e. based on OLS-centering and projection of the data. This is very much like what is performed in the basic R function prcomp.

```{r}
PCA <- gm.prcomp(Y.gpa$coords)
summary(PCA)
plot(PCA, main = "PCA")
```

Let's customise this plot:

```{r}
plot(PCA, main = "PCA", pch = 22, bg = "green", cex = 1.5, cex.lab = 1.5, font.lab = 2)
```

One then has several solutions for exploring shape variation across PC space and visualizing shape patterns. First, the user may choose to manually produce deformation grids to compare the shapes corresponding to the extremes of a chosen PC axis using plotRefToTarget. For example, one can:

1.  Compare the minimum and maximum values to the global consensus:

```{r}
msh <- mshape(Y.gpa$coords)
par(mfrow = c(1,2))
# Minimum
plotRefToTarget(PCA$shapes$shapes.comp1$min, msh)
plotRefToTarget(msh, PCA$shapes$shapes.comp1$max)
# Maximum
par(mfrow = c(1,1))
```

2.  Comparing the minimum and maximum values:

```{r}
plotRefToTarget(PCA$shapes$shapes.comp1$min, PCA$shapes$shapes.comp1$max, method = "vector", mag = 2)
```

Of course here one can use all the plotting options available in plotRefToTarget. Please see the help file of that function for details.

```{r}
?plotRefToTarget
```

### 2.2 Phylomorphospace

One may also want to project a phylogeny (if dealing with species-level observations), and estimated ancestral states into the ordination plot produced before, to obtain what is commonly referred to as a "phylomorphospace" plot. This can be easily done by providing a phylogenetic tree. This function estimates ancestral states before ordination takes place (i.e. using the raw data). For the Plethodon example data, we may project the phylogeny into the previous ordination plot as such:

```{r}
PCA.w.phylo <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy, GLS = F)
summary(PCA.w.phylo)
plot(PCA.w.phylo, phylo = T, main = "PCA.w.phylo")
```

Note that the summary statistics obtained for this analysis are identical to those from the previous one. This is because here the phylogeny is merely used for plotting, and is NOT considered during the analytical procedures.

Again, all plotting arguments can be directly manipulated by the user. Please see the help file of plot.gm.prcomp for details.

```{r}
?plot.gm.prcomp
```

### 2.3 phyloPCA

Here, the phylogeny IS considered during the analytical step of the ordination, as the principal components analysis is in this case calculated based on GLS-centering and projection of the data. This is to account for the nonindependence among observations of species. For details on the analytical part of this method, see Revell 2009, Evolution 63: 3258 - 3268; Polly et al 2013, Hystrix 24: 33 - 41; Collyer & Adams, submitted. This is effectively a PCA with a built in phylogenetic size correction.

For the Plethodon example data, this analysis would be implemented and plotted as follows (first with untransformed residual projection, second with transformed residual projection):

```{r}
# Phylo PCA without projecting untransformed residuals
phylo.PCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy, GLS = TRUE)
summary(phylo.PCA)
plot(phylo.PCA, phylo = TRUE, main = "phylo PCA")
```

```{r}
# Plot the transformed residuals
phylo.tPCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy, GLS = TRUE, transform = TRUE)
summary(phylo.tPCA)
plot(phylo.tPCA, phylo = TRUE, main = "phylo PCA with transformed projection")
```

What looks different?

### 2.4 PaCA: phylogenetically-aligned PCA

This recently introduced method (Collyer & Adams, submitted) provides an ordination that aligns phenotypic data with phylogenetic signal, by maximizing variation in directions that describe phylogenetic signal, while simultaneously preserving the Euclidean distances among observations in the data space. PaCA provides a projection that shows the most phylogenetic signal in the first few components, irrespective of other signals in the data. By comparing PCA, phyloPCA and PaCA results, one may glean the relative importance of phylogenetic and other (ecological) signals in the data.

For the Plethodon example data, this analysis would be implemented and plotted as follows:

```{r}
PaCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy, align.to.phy = TRUE)
summary(PaCA)
plot(PaCA, phylo = TRUE, main = "PaCA")
```

### 2.5 Three-dimensional PCA plot with a phylogeny and time on the z-axis

Finally, plot.gm.prcomp provides the possibility of producing a 3D plot of any two PCA axes, with the phylogenetic tree connecting the observations and time on the z-axis. Again, different plotting parameters can be controlled to manipulate plot aesthetics. Note, that in this case an rgl plotting device will open for the 3D plot, but the corresponding biplot with the phylogeny projected (option 2, above) will also be produced. This function will output the 3D plot in a separate RGL window. 

If this doesn't work - don't worry! You likely just need to install Java! 

```{r}
plot(PCA.w.phylo, time.plot = TRUE, pch = 22, bg = c(rep("red", 5), rep("green", 4)), cex = 2, 
     phylo.par = list(edge.color = "grey60", edge.width = 1.5, tip.txt.cex = 0.75,
                      node.labels = F, anc.states = F))
```

## 3.0 Model fitting in geomorph

### 3.1 Defining models

For the final section of the tutorial, let's clear up our workspace and load in the final example dataset.

```{r}
rm(list = ls())
data("larvalMorph")
```

Now let's perform GPA.

```{r}
Y.gpa <- gpagen(larvalMorph$tailcoords, curves = larvalMorph$tail.sliders,
                ProcD = FALSE, print.progress = FALSE)
plot(Y.gpa)
```

Next, let's define some putative models of shape variation that would be biologically relevant.

```{r}
gdf <- geomorph.data.frame(Y.gpa, treatment = larvalMorph$treatment, 
                           family = larvalMorph$family)
# simple allometry model
fit.size <- procD.lm(coords ~ log(Csize), data = gdf, print.progress = FALSE) 
# unique family allometries
fit.family<- procD.lm(coords ~ log(Csize) * family, data = gdf, print.progress = FALSE) 
# unique treatment: family allometries
fit.treatment<- procD.lm(coords ~ log(Csize) * treatment/family, data = gdf, print.progress = FALSE) 
```

Now let's take a look at the models.

```{r}
fit.size
```

```{r}
fit.family
```

```{r}
fit.treatment
```

Now we have defined our models, we can test how they fit our data using ANOVA.

### 3.2 Performing ANOVA and model comparisons

The following are the typical ANOVA tables for each model:

```{r}
anova(fit.size)
```

```{r}
anova(fit.family)
```

```{r}
anova(fit.treatment)
```

We can compare any number of models at once.

```{r}
anova(fit.size, fit.family, fit.treatment, print.progress = FALSE)

```

One might ascertain that models that include parameters for family and treatment are significant improvements over a model that only contains size. Note that the model fits can use types I, II, or III, sums of squares and cross-products (SSCP), ordinary or generalized least squares, and the ANOVA can be performed on a number of different test statistics (see anova.lm.rrpp help file for more details).

```{r}
?anova.lm.rrpp
```

## 4.0 Allometry analyses

It is important to note that I am no expert in the study of allometry, nor its analysis using geomorph. This is a wide-ranging package with a lot of different uses. What follows is a very brief foray into the analysis of allometry using geomorph for those who are interested using one of the models we defined earlier. There are much more detailed vignettes available online. I also highly recommend that those who are interested spend a few days reading through Chris Klingenberg's work on the topic.  

### 4.1 Simple allometry models

First, let's just consider the simple allometry model we defined earlier:

```{r}
summary(fit.size)
```

It is clear that there is a significant association between shape and size. To visualize this relationship, there are many options. First, we can use the plot generic for procD.lm and vary some of the arguments. Let's do that, using two different ways to visualize shape change: prediction lines (PredLine) and regression scores (RegScore). The former are first principal component scores for fitted values from the procD.lm fit (Adams and Nistri 2010); the latter are standardized projected shape scores, along the axis defined by the regression of shape on size (Drake and Klingenberg 2008). 

When interpreting these plots, keep in mind that the predictor is size and the other axis represents some axis of shape. 

```{r}
plot(fit.size, type = "regression", reg.type = "PredLine", predictor = log(gdf$Csize))
```

```{r}
plot(fit.size, type = "regression", reg.type = "RegScore", predictor = log(gdf$Csize))
```

The plot.procD.lm function is for any procD.lm fit. If one wishes to work specifically with allometry models, the plotAllometry function performs the same analysis as a convenient wrapper for plot.procD.lm. You just specify the method using 'method' instead of 'reg.type'. For example,

```{r}
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "PredLine")
```

```{r}
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "RegScore")
```

An important detail with these plots is that PredLine and RegScore are model-based projections of shape data. As we will see below, changing the model changes the outcome of the plot.

For simple allometry models, RegScore is the same as the common allometric component (CAC, Mitteroecker et al. 2004); i.e.,

```{r}
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "CAC")
```

The RegScore plot is the same in this simple case because only one vector of regression coefficients is produced, which aligns perfectly with the major axis of covariation between shape and size (the CAC; Adams et al. 2013)

One can also append a size vector to a matrix of shape variables and perform principal components analysis (PCA), called size-shape PCA (Mitteroecker et al. 2004).

```{r}
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "size.shape")
```

### 4.2 Complex allometry models

We already learned that family and treatment were "significant" model effects. Now let's focus on whether we should believe that families or treatments have unique allometries or a common allometry.

```{r}
fit.unique <- procD.lm(coords ~ log(Csize) * treatment/family, 
                     data = gdf, print.progress = FALSE) # unique allometries
fit.common <- procD.lm(coords ~ log(Csize) + treatment/family, 
                     data = gdf, print.progress = FALSE) # common allometry
anova(fit.common, fit.unique, print.progress = FALSE)
```

Because this model comparison did not yield a significant result, we can conclude that a common allometry model is appropriate. Thus, we might want to plot the results, color-coding the points by treatment.

```{r}
plotAllometry(fit.common, size = gdf$Csize, logsz = TRUE, method = "PredLine", pch = 19, col = as.numeric(gdf$treatment))
```

```{r}
plotAllometry(fit.common, size = gdf$Csize, logsz = TRUE, method = "RegScore",
              pch = 19, col = as.numeric(gdf$treatment))
```

## 5.0 Testing for phylogenetic signal in GPA shape variables

Finally, geomorph gives us the ability to test for phylogenetic signal in our Procrustes shape variables without ordinating our data. Let's load a new dataset.

```{r}
rm(list=ls())
data(plethspecies)
```

Perform GPA and get shape variables.

```{r}
Y.gpa <- gpagen(plethspecies$land)        
```

Now to test for phylogenetic signal in shape. We will use physignal.z.

```{r}
PS.shape <- physignal.z(A = Y.gpa$coords, phy = plethspecies$phy, lambda = "front", iter = 1000)
summary(PS.shape)
plot(PS.shape)
plot(PS.shape$PACA, phylo = T)
```

There seems to be a roblem with an ill-conditioned residual covariance matrix. Let's try shaving off one dimension (i.e. going from 8 dimensions to 7) by setting PAC.no to 7.

```{r}
PS.shape <- physignal.z(A = Y.gpa$coords, phy = plethspecies$phy, lambda = "front", PAC.no = 7, iter = 1000)
summary(PS.shape)
plot(PS.shape)
plot(PS.shape$PACA, phylo = TRUE)
```

Now let's test for phylogenetic signal in size.

```{r}
PS.size <- physignal.z(A = Y.gpa$Csize, phy = plethspecies$phy, lambda = "front", iter = 1000)
summary(PS.size)
plot(PS.size)
```

Pagel's lambda is the go-to measure of phylogenetic signal. Bounded between 0-1, estimated lambda values of 0 mean our traits are inferred to have no phylogenetic signal. 1 is Brownian motion (i.e. the only variation left after you take out the phylogenetic signal is random).

These functions also report Bloomberg's K. Again, a value of 0 means independence, higher values = some sort of phylogenetic signal (it is unbounded).

The P-value reports significance of effect (i.e. low p-values = significant phylogenetic signal).

Finally, the functions also report a standardised effect size (Z).

Lots of information to parse but handily, one function does it all for you!
